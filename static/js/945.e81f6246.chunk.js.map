{"version":3,"file":"static/js/945.e81f6246.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/core/base.js","js/opener.js","js/slide/loader.js","js/photoswipe.js","js/slide/get-thumb-bounds.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","/**\r\n  * Creates element and optionally appends it to another.\r\n  *\r\n  * @param {String} className\r\n  * @param {String|NULL} tagName\r\n  * @param {Element|NULL} appendToEl\r\n  */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Object} p1 Point\r\n * @param {Object} p2 Point\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {Number} val\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {Number} x\r\n * @param {Number|null} y\r\n * @param {Number|null} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {DOMElement} el\r\n * @param {Number} x\r\n * @param {Number|null} y\r\n * @param {Number|null} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {Element} el\r\n * @param {String} prop CSS property to animate\r\n * @param {Number} duration in ms\r\n * @param {String|NULL} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {Event} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {Element|NodeList|String} option\r\n * @param {String|null} legacySelector\r\n * @param {Element|null} parent\r\n * @returns Element[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {*} fn\r\n * @returns Boolean\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type Can be multiple, separated by space.\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {DOMElement} target\r\n   * @param {String} type\r\n   * @param {Function} listener\r\n   * @param {Boolean} passive\r\n   * @param {Boolean} unbind Whether the event should be added or removed\r\n   * @param {Boolean} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = (unbind ? 'remove' : 'add') + 'EventListener';\r\n    type = type.split(' ');\r\n    type.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","export function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {String}  prop 'left', 'top', 'bottom', 'right'\r\n * @param {Object}  options PhotoSwipe options\r\n * @param {Object}  viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {Object}  itemData Data about the slide\r\n * @param {Integer} index Slide index\r\n * @returns {Number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    if (options[legacyPropName]) {\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nimport {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\nclass PanBounds {\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    this.center = {};\r\n    this.max = {};\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  // _getItemBounds\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  // _calculateItemBoundsForAxis\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {String} axis x or y\r\n   * @param {Object} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\n\r\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {Object} options PhotoSwipe options\r\n   * @param {Object} itemData Slide data\r\n   * @param {Integer} index Slide index\r\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // zoom.initial\r\n    // zoom.secondary\r\n    // zoom.max\r\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @return {Number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/**\r\n * Renders and allows to control a single slide\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\nclass Slide {\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    this.width = this.content.width;\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {Boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {Boolean} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param  {Number} destZoomLevel      Destination zoom level.\r\n   * @param  {Object|false} centerPoint  Transform origin center point,\r\n   *                                     or false if viewport center should be used.\r\n   * @param  {Number} transitionDuration Transition duration, may be set to 0.\r\n   * @param  {Boolean|null} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {Boolean|null}              Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {Number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {String} axis\r\n   * @param {Object|null} centerPoint point based on which zoom is performed,\r\n   *                                  usually refers to the current mouse position,\r\n   *                                  if false - viewport center will be used.\r\n   * @param {Number|null} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {Number} panX\r\n   * @param {Number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {Number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","/**\r\n * Handles single pointer dragging\r\n */\r\n\r\nimport {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\nclass DragHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @param {String} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @param {Number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @param {String} axis\r\n   * @param {Number} potentialPan\r\n   * @param {Number|null} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    this._startPan = {};\r\n\r\n    this._startZoomPoint = {};\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {Boolean} ignoreGesture Wether gesture coordinates should be ignored\r\n   *                                when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * Tap, double-tap handler.\r\n */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {Event} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(event.target.closest('.pswp__container'));\r\n}\r\n\r\nclass TapHandler {\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n\r\n  click(point, originalEvent) {\r\n    const targetClassList = originalEvent.target.classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const optionValue = pswp.options[actionName + 'Action'];\r\n\r\n    if (pswp.dispatch(actionName + 'Action', { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nimport {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\nclass Gestures {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    this.p1 = {}; // the first pressed pointer\r\n    this.p2 = {}; // the second pressed pointer\r\n    this.prevP1 = {};\r\n    this.prevP2 = {};\r\n    this.startP1 = {};\r\n    this.startP2 = {};\r\n    this.velocity = {};\r\n\r\n    this._lastStartP1 = {};\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @param {Number} axis\r\n   * @param {Number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @param {Event} e\r\n   * @param {String} pointerType Normalized pointer type ('up', 'down' or 'move')\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === e.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(e, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(e, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      this._numActivePoints = 0;\r\n      if (e.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (e.touches && e.touches.length > 0) {\r\n          this._convertEventPosToPoint(e.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (e.touches.length > 1) {\r\n            this._convertEventPosToPoint(e.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(e, this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @param {Event} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    // e.pointerId can be zero\r\n    if (e.pointerId !== undefined) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nimport {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {Boolean} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {Integer} diff\r\n   * @returns {Boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {Number} x\r\n   * @param {Boolean} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    let newSlideIndexOffset;\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","/**\r\n *\r\n * keyboard.js\r\n *\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n *\r\n */\r\n\r\nimport { specialKeyUsed } from './util/util.js';\r\n\r\nclass Keyboard {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = document.activeElement;\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    let keydownAction;\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {Event} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(e.target)) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","/**\r\n * Runs CSS transition.\r\n */\r\n\r\nimport { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\nclass CSSAnimation {\r\n  // onComplete can be unpredictable, be careful about current state\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    this._target = target;\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","/**\r\n * Spring easing helper\r\n */\r\n\r\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\nclass SpringEaser {\r\n  /**\r\n   * @param {Number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {Number} dampingRatio Determines how bouncy animation will be.\r\n   *                              From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   *                              \"overshoot\" refers to part of animation that\r\n   *                              goes beyond the final value.\r\n   *\r\n   * @param {Number} naturalFrequency Determines how fast animation will slow down.\r\n   *                                  The higher value - the stiffer the transition will be,\r\n   *                                  and the faster it will slow down.\r\n   *                                  Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Number} deltaPosition Difference between current and end position of the animation\r\n   * @param {Number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {Number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\nclass SpringAnimation {\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    this._onFinish = onFinish;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/**\r\n * Manages animations\r\n */\r\n\r\nclass Animations {\r\n  constructor() {\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  _start(props, isSpring) {\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  out = out.split('%d').join(svgData.size || 32); // replace all %d with size\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = tagName.toLowerCase();\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        element.type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        element.setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', false, pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        element.disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","const closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","const zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","export const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    let isVisible;\r\n    let delayTimeout;\r\n\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","export const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {Boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/**\r\n * Base PhotoSwipe event object\r\n */\r\nclass PhotoSwipeEvent {\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    this._listeners = {};\r\n    this._filters = {};\r\n  }\r\n\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = new PhotoSwipeEvent(name, details);\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {String|false} imageSrc\r\n   * @param {Element} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      this.element.decoding = 'async';\r\n      this.element.alt = '';\r\n      this.element.src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\nclass Content {\r\n  /**\r\n   * @param {Object} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {Slide|undefined} slide Slide that requested the image,\r\n   *                                can be undefined if image was requested by something else\r\n   *                                (for example by lazy-loader)\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    this.element = createElement('pswp__img', 'img');\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      this.element.srcset = this.data.srcset;\r\n    }\r\n\r\n    this.element.src = this.data.src;\r\n\r\n    this.element.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (this.element.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      this.element.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      this.element.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = this.element;\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = width;\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   *\r\n   * @param {Boolean} isLazy\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            this.element.decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nimport Eventable from './eventable';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content';\r\n\r\n\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if (dataSource.length) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource.gallery) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallerySelecor and childSelector options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {Element} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {Element} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    this.applyFilters('domItemData', itemData, element, linkEl);\r\n\r\n    return itemData;\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\n\r\nimport {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\nclass Opener {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = MIN_OPACITY;\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = MIN_OPACITY;\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = MIN_OPACITY;\r\n        }\r\n        pswp.element.style.opacity = 1;\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = MIN_OPACITY;\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(this._placeholder).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch('initialZoom' + (this.isOpening ? 'In' : 'Out'));\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = 1;\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', pswp.options.bgOpacity);\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', 1);\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', 0);\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', 0);\r\n    }\r\n  }\r\n\r\n  _setClosedStateZoomPan(animate) {\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} target\r\n   * @param {String} prop\r\n   * @param {String} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {Object} itemData Data about the slide\r\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {Integer} index\r\n * @returns {Object|Boolean} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  const viewportSize = instance.viewportSize || getViewportSize(options);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {Integer} index Slide index\r\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {Integer} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    // offset of viewport relative to document\r\n    this.offset = {};\r\n\r\n    this._prevViewportSize = {};\r\n\r\n    // Size of scrollable PhotoSwipe viewport\r\n    this.viewportSize = {};\r\n\r\n    // background (backdrop) opacity\r\n    this.bgOpacity = 1;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', this.currIndex, this._initialItemData, true);\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {Integer} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param  {Integer} New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {Integer} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {Object} holder mainScroll.itemHolders array item\r\n   * @param {Integer} index Slide index\r\n   * @param {Boolean} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param  {Boolean} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = this.bgOpacity * this.options.bgOpacity;\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', -1);\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","function getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  // Coordinates of the image,\r\n  // as if it was not cropped,\r\n  // height is calculated automatically\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {Integer} index\r\n * @param {Object} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns Object|undefined\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  if (event.thumbBounds) {\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.w,\r\n        itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","supportsPassive","window","addEventListener","get","e","DOMEvents","this","_pool","type","listener","passive","_toggleListener","poolItem","unbind","skipPool","methodName","split","eType","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","_updateAxis","dispatch","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionValue","Number","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","holderElement","calculateSize","transformOrigin","load","appendHeavy","updateContentSize","innerHTML","zoomAndPanToInitial","applyCurrentZoomPan","heavyAppended","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","navigator","maxTouchPoints","drag","tapHandler","on","events","add","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","change","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","doubleTap","setTimeout","tap","click","clearTimeout","displacement","cancelAnimationFrame","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","slideWidth","itemHolders","itemHolder","_containerShiftIndex","resize","_currPositionIndex","_prevPositionIndex","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","setIsActive","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","_target","_onComplete","_onTransitionEnd","_firstFrameTimeout","_finalizeAnimation","_finished","onFinish","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","_onFinish","_raf","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","_lastUpdatedZoomLevel","currZoomLevelDiff","secondaryIsHigher","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","priority","f1","f2","addFilter","removeFilter","args","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","instance","isAttached","state","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","srcset","complete","onLoaded","onload","onerror","onError","displayError","isError","image","dataset","largestUsedSize","sizes","errorMsgEl","errorMsg","removePlaceholder","isDecoding","decode","then","appendImage","catch","PhotoSwipeBase","numItems","dataSource","gallery","_getGalleryDOMElements","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","parseInt","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_thumbBounds","_initialThumbBounds","getThumbBounds","_placeholder","getPlaceholderElement","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","img","decoded","isDelaying","reject","finally","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","lazyLoadSlide","getItemData","createContentFromData","lazyLoad","zoomLevel","ceil","lazyLoadData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","addToCache","setSlide","removeByIndex","indexToRemove","item","find","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","open","goTo","removeAll","listeners","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}